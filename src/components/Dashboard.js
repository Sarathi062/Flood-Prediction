import React, { useState, useEffect } from "react";
import {
  AppBar, Toolbar, Typography, Grid, Paper, Card, CardContent, Box,
  Chip, Alert, CircularProgress, IconButton, Snackbar, Container, Tooltip, Divider, Avatar, Tabs, Tab
} from "@mui/material";
import {
  Refresh as RefreshIcon, Notifications as NotificationsIcon, WaterDrop as WaterDropIcon,
  Cloud as CloudIcon, Warning as WarningIcon, Chat as ChatIcon, Comment as CommentIcon
} from "@mui/icons-material";
import { MapContainer, TileLayer, Circle, Popup } from "react-leaflet";
import "leaflet/dist/leaflet.css";
import L from "leaflet";
import axios from "axios";
import { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip as RTooltip, ResponsiveContainer } from "recharts";

// Leaflet default icon fix
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: require("leaflet/dist/images/marker-icon-2x.png"),
  iconUrl: require("leaflet/dist/images/marker-icon.png"),
  shadowUrl: require("leaflet/dist/images/marker-shadow.png"),
});

// Dummy widgets - replace with real logic/data as ready
const DummyModule = ({ title, desc, icon }) => (
  <Card sx={{ mb: 2, bgcolor: "#f1f5f9" }}>
    <CardContent>
      <Box sx={{ display: "flex", alignItems: "center" }}>
        {icon} <Typography variant="h6" sx={{ ml: 1, flexGrow: 1 }}>{title}</Typography>
      </Box>
      <Typography variant="body2" color="textSecondary">{desc}</Typography>
      <Box sx={{ mt: 2 }}><Typography variant="caption" sx={{ color: "#aaa" }}>Coming soon</Typography></Box>
    </CardContent>
  </Card>
);

const AIInsightsCard = ({ insight }) => (
  <Card sx={{ mb: 2, bgcolor: "#eaf6fb" }}>
    <CardContent>
      <Box sx={{ display: "flex", alignItems: "center" }}>
        <ChatIcon color="primary" sx={{ mr: 1 }} />
        <Typography variant="h6">AI Insights</Typography>
      </Box>
      <Divider sx={{ my: 1 }} />
      <Typography variant="body2">{insight}</Typography>
      <Box sx={{ mt: 2 }}>
        <Typography variant="caption" color="primary">Generated by AI - {new Date().toLocaleTimeString()}</Typography>
      </Box>
    </CardContent>
  </Card>
);

const EventLog = ({ events }) => (
  <Card sx={{ mb: 2 }}>
    <CardContent>
      <Typography variant="h6" gutterBottom>
        ðŸ“œ Event Log (Recent)
      </Typography>
      {events.length === 0 ? (
        <Typography variant="body2" color="textSecondary">No events yet</Typography>
      ) : (
        events.map((ev, i) => (
          <Box key={i} sx={{ display: "flex", alignItems: "center", gap: 1, mb: 1 }}>
            <WarningIcon sx={{ color: ev.type === "warning" ? "#ff9800" : "#4caf50", fontSize: 16 }} />
            <Typography variant="caption">{ev.time}</Typography>
            <Typography variant="body2" sx={{ ml: 1 }}>{ev.message}</Typography>
          </Box>
        ))
      )}
    </CardContent>
  </Card>
);

// Main Dashboard
const Dashboard = () => {
  const [locations, setLocations] = useState([]);
  const [loading, setLoading] = useState(true);
  const [alerts, setAlerts] = useState([]);
  const [snackbar, setSnackbar] = useState({ open: false, message: "" });
  const [selectedLocation, setSelectedLocation] = useState(null);
  const [lastUpdate, setLastUpdate] = useState(new Date());

  // Dummy data for advanced cards and placeholders
  const dummyEvents = [
    { type: "warning", time: "6:45 PM", message: "Discharge spiked at Riverside" },
    { type: "info", time: "6:30 PM", message: "Heavy rainfall started at Baner area" }
  ];

  const aiDummyText = "AI detected a surge in rainfall at Baner with matching discharge increase at downstream locations. Review risk thresholds for updated forecast recommendations.";

  // API base
  const API_BASE_URL = process.env.REACT_APP_DEP_API_URL || "http://localhost:3001";

  // Fetch predictions
  const fetchPredictions = async () => {
    setLoading(true);
    try {
      const res = await axios.get(`${API_BASE_URL}/api/predict-flood`);
      if (res.data?.success && Array.isArray(res.data.data)) {
        setLocations(res.data.data);
        const allAlerts = [];
        res.data.data.forEach(loc =>
          loc.floodForecast
            .filter(f => f.riskLevel === "Red Alert" || f.riskLevel === "Warning")
            .forEach(forecast =>
              allAlerts.push({ id: `${loc.location}-${forecast.date}`, location: loc.location, date: forecast.date, riskLevel: forecast.riskLevel })));
        setAlerts(allAlerts.slice(-5).reverse());
      }
      setLastUpdate(new Date());
    } catch {
      setSnackbar({ open: true, message: "Failed to fetch predictions" });
      setLocations([]);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchPredictions();
    const interval = setInterval(fetchPredictions, 300000);
    return () => clearInterval(interval);
  }, []);

  const getRiskColor = (level) =>
    level === "Safe" ? "#4caf50" : level === "Warning" ? "#ff9800" : level === "Red Alert" ? "#f44336" : "#bdbdbd";
  const getRiskChipColor = (level) =>
    level === "Safe" ? "success" : level === "Warning" ? "warning" : level === "Red Alert" ? "error" : "default";

  // Flattened forecast for charts
  const chartDataForLocation = (loc) =>
    loc?.floodForecast ? loc.floodForecast.map(day => ({
      date: day.date,
      rainfall: parseFloat(day.rainfall),
      discharge: day.estimatedDischarge ?? 0,
      probability: day.releaseProbability ?? 0,
      riskLevel: day.riskLevel,
    })) : [];

  return (
    <Box sx={{ flexGrow: 1, bgcolor: "#f5f5f5", minHeight: "100vh" }}>
      {/* Header */}
      {/* <AppBar position="static" sx={{ background: "linear-gradient(135deg, #1e40af 0%, #3b82f6 100%)" }}> */}
        <Toolbar sx={{display: "flex", alignContent: "center", justifyContent: "center" }}>
         
          <Tooltip title="Refresh">
            <IconButton color="inherit" onClick={fetchPredictions} disabled={loading}><RefreshIcon /></IconButton>
          </Tooltip>
          <Tooltip title="Alerts">
            <IconButton color="inherit"><NotificationsIcon />
              {alerts.length > 0 && (
                <Box sx={{
                  position: "absolute", top: 8, right: 8, bgcolor: "red",
                  borderRadius: "50%", width: 16, height: 16, display: "flex",
                  alignItems: "center", justifyContent: "center", fontSize: 10, color: "white",
                }}>{alerts.length}</Box>
              )}
            </IconButton>
          </Tooltip>
          <Box sx={{ ml: 2 }}>
            <Typography variant="caption" color="#09090aff" sx={{ fontWeight: 400 }}>
              Last updated: {lastUpdate.toLocaleTimeString()}
            </Typography>
          </Box>
        </Toolbar>
      {/* </AppBar> */}

      {/* Main */}
      <Container maxWidth="xl" sx={{ mt: 3, mb: 3 }}>
        {/* Alert */}
        {alerts.length > 0 && (
          <Alert severity="error" icon={<WarningIcon />} sx={{ mb: 2 }}>
            <strong>Critical:</strong>{" "}
            {alerts[0].location} on {alerts[0].date} ({alerts[0].riskLevel})
          </Alert>
        )}

        <Grid container spacing={3}>
          {/* Main Map + Details */}
          {/* <Grid item xs={12} lg={8}> */}
            <Paper sx={{ p: 2, height: 600, width: "100%" }}>
              {/* Map section */}
              <Typography variant="h6" gutterBottom sx={{width: "100%"
              }}>Flood Risk Zones</Typography>
              {loading ? (
                <Box sx={{
                  display: "flex", justifyContent: "center",
                  alignItems: "center", height: 480, width: "100%"
                }}><CircularProgress /></Box>
              ) : (
                <MapContainer center={[18.5204, 73.8567]} zoom={12}
                  style={{ height: "510px", width: "100%", borderRadius: 8 }}>
                  <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
                    attribution="&copy; OpenStreetMap contributors" style={{width: "90%"}} />
                  {locations.map(loc => (
                    <Circle
                      key={loc.location}
                      center={[loc.coordinates.lat, loc.coordinates.lng]}
                      radius={700}
                      pathOptions={{
                        color: getRiskColor(loc.floodForecast?.[0]?.riskLevel || "Safe"),
                        fillColor: getRiskColor(loc.floodForecast?.[0]?.riskLevel || "Safe"),
                        fillOpacity: 0.4, weight: 2,
                      }}
                      eventHandlers={{
                        click: () => setSelectedLocation(loc),
                      }}
                    >
                      <Popup>
                        <Box sx={{ minWidth: 200 }}>
                          <Typography variant="h6" gutterBottom>{loc.location}</Typography>
                          <Typography variant="body2"><strong>Risk Today:</strong>{" "}
                            <Chip
                              size="small"
                              label={loc.floodForecast?.[0]?.riskLevel || "Unknown"}
                              color={getRiskChipColor(loc.floodForecast?.[0]?.riskLevel)}
                            /></Typography>
                          <Typography variant="body2"><strong>Lat/Lng:</strong> {loc.coordinates.lat},{loc.coordinates.lng}</Typography>
                          <button style={{
                            marginTop: 9, padding: "6px 12px", background: "#1976d2", color: "white", border: "none",
                            borderRadius: 4, cursor: "pointer"
                          }} onClick={() => setSelectedLocation(loc)}>Show Details</button>
                        </Box>
                      </Popup>
                    </Circle>
                  ))}
                </MapContainer>
              )}
            </Paper>
          {/* </Grid> */}
          {/* Sidebar */}
          <Grid item xs={12} lg={4}>
            <Grid container spacing={2}>
              {/* Location & status cards */}
              <Grid item xs={12}>
                <Card>
                  <CardContent>
                    <Typography variant="h6" gutterBottom>Status Overview ({locations.length} locations)</Typography>
                    {locations.slice(0, 1).map(loc => (
                      <Box key={loc.location} sx={{ mb: 1 }}>
                        <Typography variant="body2" color="textSecondary">
                          Location: <b>{loc.location}</b>
                        </Typography>
                        <Box sx={{ display: "flex", alignItems: "center", mb: 1 }}>
                          <CloudIcon sx={{ mr: 1, color: "#2196f3" }} />
                          <Typography variant="body2">Rainfall Today: {loc.floodForecast?.[0]?.rainfall || "--"} mm</Typography>
                        </Box>
                        <Box sx={{ display: "flex", alignItems: "center", mb: 1 }}>
                          <WaterDropIcon sx={{ mr: 1, color: "#03a9f4" }} />
                          <Typography variant="body2">Discharge: {loc.floodForecast?.[0]?.estimatedDischarge || "--"} mÂ³/s</Typography>
                        </Box>
                        <Typography variant="body2">
                          Probability: {(loc.floodForecast?.[0]?.releaseProbability * 100 || 0).toFixed(0)}%
                        </Typography>
                        <Chip
                          label={loc.floodForecast?.[0]?.riskLevel?.toUpperCase() || "UNKNOWN"}
                          color={getRiskChipColor(loc.floodForecast?.[0]?.riskLevel)}
                          size="small" sx={{ mt: 1 }}
                        />
                      </Box>
                    ))}
                    <Typography variant="caption" color="textSecondary">
                      Last updated: {lastUpdate.toLocaleTimeString()}
                    </Typography>
                  </CardContent>
                </Card>
              </Grid>
              {/* AI Insights (dummy) */}
              {/* <Grid item xs={12}><AIInsightsCard insight={aiDummyText} /></Grid> */}
              {/* Chart card */}
              {/* <Grid item xs={12}>
                <Card>
                  <CardContent>
                    <Typography variant="h6" gutterBottom>ðŸ“ˆ 7-Day Rainfall vs Discharge</Typography>
                    {locations.length > 0 ? (
                      <ResponsiveContainer width="100%" height={180}>
                        <AreaChart data={chartDataForLocation(locations[0])}>
                          <CartesianGrid strokeDasharray="3 3" />
                          <XAxis dataKey="date" tick={{ fontSize: 11 }} />
                          <YAxis tick={{ fontSize: 11 }} />
                          <RTooltip />
                          <Area
                            type="monotone"
                            dataKey="rainfall"
                            stroke="#2196f3"
                            fill="#e3f2fd"
                            name="Rainfall [mm]"
                          />
                          <Area
                            type="monotone"
                            dataKey="discharge"
                            stroke="#f44336"
                            fill="#ffebee"
                            name="Discharge [mÂ³/s]"
                          />
                        </AreaChart>
                      </ResponsiveContainer>
                    ) : (
                      <Typography variant="body2" color="textSecondary">No data</Typography>
                    )}
                  </CardContent>
                </Card>
              </Grid> */}
              {/* Event Log & Collaboration (dummy, future) */}
              {/* <Grid item xs={12}><EventLog events={dummyEvents} /></Grid> */}
              {/* <Grid item xs={12}>
                <DummyModule
                  title="Collaboration/Notes"
                  icon={<CommentIcon color="action" />}
                  desc="Collaborative notes and discussion area for each forecast/location."
                />
              </Grid> */}
              {/* <Grid item xs={12}>
                <DummyModule
                  title="Maintenance & Camera"
                  icon={<WaterDropIcon color="primary" />}
                  desc="Upcoming: Sensor maintenance, camera integrations, and live feeds from flood monitoring sites."
                />
              </Grid> */}
            </Grid>
          </Grid>
        </Grid>

        {/* Bottom Forecast & Placeholders */}
        <Box sx={{ mt: 6 }}>
          <Typography variant="h6" gutterBottom>
            7-Day Forecast for All Locations
          </Typography>
          <Grid container spacing={2}>
            {locations.map(loc => (
              <Grid item xs={12} md={6} lg={4} key={loc.location}>
                <Card>
                  <CardContent>
                    <Typography variant="subtitle1" sx={{ mb: 1 }}>{loc.location}</Typography>
                    {loc.floodForecast && loc.floodForecast.length > 0 ? (
                      <Box sx={{ display: "flex", flexDirection: "column", gap: 1 }}>
                        {loc.floodForecast.map((day, idx) => (
                          <Paper key={day.date}
                            sx={{ background: "#ecf1f8", borderRadius: 2, display: "flex", alignItems: "center", px: 2, py: 0.5, mb: 0.5 }}>
                            <Box sx={{ flexGrow: 1 }}>
                              <Typography variant="body2" sx={{ fontWeight: 600 }}>
                                {day.date}
                              </Typography>
                            </Box>
                            <Chip size="small"
                              label={day.riskLevel}
                              color={getRiskChipColor(day.riskLevel)}
                              sx={{ mr: 1 }}
                            />
                            <Typography variant="body2" sx={{ minWidth: 70, textAlign: "right" }}>
                              {day.rainfall} mm
                            </Typography>
                            <Typography variant="caption" sx={{ minWidth: 56, textAlign: "center", color: "#666", opacity: 0.8 }}>
                              {Math.round((day.releaseProbability || 0) * 100)}%
                            </Typography>
                            <Typography variant="body2" sx={{ minWidth: 70, textAlign: "right" }}>
                              {day.estimatedDischarge?.toFixed?.(1) ?? "--"} mÂ³/s
                            </Typography>
                          </Paper>
                        ))}
                      </Box>
                    ) : (
                      <Typography variant="body2" color="textSecondary">No forecast data</Typography>
                    )}
                  </CardContent>
                </Card>
              </Grid>
            ))}
            {/* Dummy placeholders: add your other module cards here */}
            <Grid item xs={12} md={6} lg={4}><DummyModule title="Satellite Flood Mapping" icon={<CloudIcon />} desc="High-res overlays of current flood extent." /></Grid>
            <Grid item xs={12} md={6} lg={4}><DummyModule title="3D Impact Simulation" icon={<WaterDropIcon />} desc="Visualize possible future flood impact in 3D." /></Grid>
          </Grid>
        </Box>
      </Container>

      {/* Snackbar */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={4000}
        onClose={() => setSnackbar({ ...snackbar, open: false })}
        message={snackbar.message}
        anchorOrigin={{ vertical: "bottom", horizontal: "center" }}
      />
    </Box>
  );
};

export default Dashboard;
